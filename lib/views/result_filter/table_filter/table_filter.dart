import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:techable/views/result_filter/table_filter/utils.dart';

class OcrCell {
  final String text;
  final Rect boundingBox;

  OcrCell({required this.text, required this.boundingBox});
}

String processTableFormat({required List<TextBlock> blocks}) {
  List<List<String>> tableFromTop =
      extractTableDataY(blocks: blocks, fromBottom: false);
  List<List<String>> tableFromBottom =
      extractTableDataY(blocks: blocks, fromBottom: true);

  // Gi·ªù b·∫°n c√≥ th·ªÉ so s√°nh 2 b·∫£ng:
  debugPrint("---------------top-----------");
  for (int i = 0; i < tableFromTop.length; i++) {
    debugPrint('Top: ${tableFromTop[i]}');
  }
  debugPrint("------------bottom--------------");
  for (int i = 0; i < tableFromTop.length; i++) {
    debugPrint('Bottom: ${tableFromBottom[i]}');
  }
  debugPrint("--------------------------");
  return _process(tableFromTop: tableFromTop, tableFromBottom: tableFromBottom);
}

List<List<String>> extractTableDataY(
    {required List<TextBlock> blocks, required bool fromBottom}) {
  final lines = <TextLine>[];
  for (final block in blocks) {
    lines.addAll(block.lines);
  }

  final cells = lines
      .map((line) => OcrCell(text: line.text, boundingBox: line.boundingBox))
      .toList();

  // Gom h√†ng theo t·ªça ƒë·ªô y
  cells.sort((a, b) => fromBottom
      ? b.boundingBox.top.compareTo(a.boundingBox.top)
      : a.boundingBox.top.compareTo(b.boundingBox.top));
  const yThreshold = 20;
  final rows = <List<OcrCell>>[];

  for (var cell in cells) {
    bool added = false;
    for (var row in rows) {
      if ((cell.boundingBox.top - row.first.boundingBox.top).abs() <
          yThreshold) {
        row.add(cell);
        added = true;
        break;
      }
    }
    if (!added) rows.add([cell]);
  }

  // S·∫Øp x·∫øp t·ª´ng h√†ng theo x
  for (final row in rows) {
    row.sort((a, b) => a.boundingBox.left.compareTo(b.boundingBox.left));
  }

  // Chuy·ªÉn sang List<List<String>> m√† kh√¥ng th√™m '' n·∫øu thi·∫øu c·ªôt
  final rawTableData =
      rows.map((row) => row.map((cell) => cell.text).toList()).toList();

  // In log ƒë·ªÉ debug
  for (var row in rawTableData) {
    debugPrint(row.join(' | '));
  }

  return rawTableData;
}

String _process(
    {required List<List<String>> tableFromTop,
    required List<List<String>> tableFromBottom}) {
// T√¨m header row ch·ª©a "STT"

  final headerRowTop = tableFromTop.firstWhere(
    (row) => row.isNotEmpty && fuzzyMatchToStt(row.first),
    orElse: () => [],
  );

  final headerRowBottom = tableFromBottom.firstWhere(
    (row) => row.isNotEmpty && fuzzyMatchToStt(row.first),
    orElse: () => [],
  );

  debugPrint('Row "STT" t·ª´ Top (kh√¥ng d·∫•u): $headerRowTop');
  debugPrint('Row "STT" t·ª´ Bottom (kh√¥ng d·∫•u): $headerRowBottom');
  debugPrint('-----------------');

  final totalRowTop = tableFromTop.firstWhere(
    (row) => row.isNotEmpty && fuzzyMatchToTongCong(row.first),
    orElse: () => [],
  );

  final totalRowBottom = tableFromBottom.firstWhere(
    (row) => row.isNotEmpty && fuzzyMatchToTongCong(row.first),
    orElse: () => [],
  );

  debugPrint('Row "T·ªïng c·ªông" t·ª´ Top (kh√¥ng d·∫•u): $totalRowTop');
  debugPrint('Row "T·ªïng c·ªông" t·ª´ Bottom (kh√¥ng d·∫•u): $totalRowBottom');
  debugPrint('-----------------');
  final sectionTop = extractSectionBetweenRows(
    table: tableFromTop,
    isStart: fuzzyMatchToStt,
    isEnd: fuzzyMatchToTongCong,
  );

  final sectionBottom = extractSectionBetweenRows(
    table: tableFromBottom,
    isStart: fuzzyMatchToStt,
    isEnd: fuzzyMatchToTongCong,
  );

  debugPrint('--- Section from Top ---');
  for (var row in sectionTop) {
    debugPrint(row.toString());
  }

  debugPrint('--- Section from Bottom ---');
  for (var row in sectionBottom) {
    debugPrint(row.toString());
  }
  debugPrint("----------------");

  List<List<String>> finalTable = mergeSections(sectionTop, sectionBottom);

  // üîÅ Ch·ªçn header d√†i nh·∫•t
  final headerRow = headerRowTop.length >= headerRowBottom.length
      ? headerRowTop
      : headerRowBottom;

  // üîÅ Ch·ªçn total row d√†i nh·∫•t
  final totalRow = totalRowTop.length >= totalRowBottom.length
      ? totalRowTop
      : totalRowBottom;

  // N·∫øu finalTable r·ªóng th√¨ kh√¥ng th·ªÉ thay header/total, n√™n ki·ªÉm tra tr∆∞·ªõc
  if (finalTable.isEmpty) {
    debugPrint("finalTable r·ªóng, kh√¥ng th·ªÉ thay th·∫ø header v√† total.");
    return "";
  }

  // üîÅ G·∫Øn header v√†o ƒë·∫ßu v√† total v√†o cu·ªëi b·∫±ng c√°ch thay th·∫ø ph·∫ßn t·ª≠
  finalTable[0] = headerRow;
  finalTable[finalTable.length - 1] = totalRow;

  //clean data
  finalTable = formatNumericCellsClean(finalTable);

  // ‚úÖ In k·∫øt qu·∫£
  debugPrint('=== Final Combined Table ===');
  for (var row in finalTable) {
    debugPrint(row.toString());
  }

  //convert json
  final resultJson = generateJsonFromTable(
    finalTable: finalTable,
    headerRow: finalTable.first,
    totalRowBottom: finalTable.last,
  );

  String textJson = jsonEncode(resultJson);

  debugPrint(textJson);
  return textJson;
}

List<List<String>> mergeSections(
  List<List<String>> sectionTop,
  List<List<String>> sectionBottom,
) {
  if (sectionTop.isEmpty && sectionBottom.isEmpty) return [];

  // 1. So s√°nh header (d√≤ng ƒë·∫ßu ti√™n)
  final headerTop = sectionTop.isNotEmpty ? sectionTop.first : <String>[];
  final headerBottom =
      sectionBottom.isNotEmpty ? sectionBottom.first : <String>[];
  final betterHeader =
      headerTop.length >= headerBottom.length ? headerTop : headerBottom;

  // 2. So s√°nh d√≤ng "T·ªïng c·ªông" (gi·∫£ s·ª≠ l√† d√≤ng cu·ªëi c√πng)
  final totalTop = sectionTop.length >= 2 ? sectionTop.last : <String>[];
  final totalBottom =
      sectionBottom.length >= 2 ? sectionBottom.last : <String>[];

  // Ki·ªÉm tra d√≤ng "T·ªïng c·ªông" c√≥ n·∫±m ·ªü ƒë·∫ßu d√≤ng kh√¥ng
  final isTotalTopValid =
      totalTop.isNotEmpty && fuzzyMatchToTongCong(totalTop.first);
  final isTotalBottomValid =
      totalBottom.isNotEmpty && fuzzyMatchToTongCong(totalBottom.first);

  final betterTotal = isTotalBottomValid
      ? totalBottom
      : isTotalTopValid
          ? totalTop
          : <String>[];

  // 3. C√°c d√≤ng ·ªü gi·ªØa (b·ªè header v√† total)
  final middleTop = sectionTop.length > 2
      ? sectionTop.sublist(1, sectionTop.length - 1)
      : <List<String>>[];
  final middleBottom = sectionBottom.length > 2
      ? sectionBottom.sublist(1, sectionBottom.length - 1)
      : <List<String>>[];

  final maxLength = middleTop.length > middleBottom.length
      ? middleTop.length
      : middleBottom.length;
  final List<List<String>> mergedMiddleRows = [];

  for (int i = 0; i < maxLength; i++) {
    final rowTop = i < middleTop.length ? middleTop[i] : <String>[];
    final rowBottom = i < middleBottom.length ? middleBottom[i] : <String>[];
    final betterRow = rowTop.length >= rowBottom.length ? rowTop : rowBottom;
    mergedMiddleRows.add(betterRow);
  }

  // 4. G·ªôp t·∫•t c·∫£ l·∫°i
  final result = <List<String>>[
    betterHeader,
    ...mergedMiddleRows,
    if (betterTotal.isNotEmpty) betterTotal,
  ];

  return result;
}

List<List<String>> formatNumericCellsClean(List<List<String>> table) {
  final RegExp startsWithDigit = RegExp(r'^\d');
  final RegExp keepNumberChars = RegExp(r'[0-9.,]');

  return table.map((row) {
    return row.map((cell) {
      if (startsWithDigit.hasMatch(cell)) {
        // Gi·ªØ l·∫°i c√°c k√Ω t·ª± s·ªë, d·∫•u ch·∫•m ho·∫∑c d·∫•u ph·∫©y
        final cleaned = cell
            .split('')
            .where((char) => keepNumberChars.hasMatch(char))
            .join();
        return cleaned;
      } else {
        return cell;
      }
    }).toList();
  }).toList();
}

Map<String, dynamic> generateJsonFromTable({
  required List<List<String>> finalTable,
  required List<String> headerRow,
  required List<String> totalRowBottom,
}) {
  // üëâ T√¨m v·ªã tr√≠ c·ªßa √¥ ch·ª©a t·ª´ "T·ªïng c·ªông" trong totalRowBottom
  final indexOfTongCong = totalRowBottom.indexWhere(fuzzyMatchToTongCong);

  // üëâ L·∫•y gi√° tr·ªã ph√≠a sau √¥ "T·ªïng c·ªông", n·∫øu c√≥
  final totalValue =
      (indexOfTongCong != -1 && indexOfTongCong + 1 < totalRowBottom.length)
          ? totalRowBottom[indexOfTongCong + 1]
          : "";

  // üëâ C·∫Øt ph·∫ßn rows t·ª´ finalTable, b·ªè d√≤ng header (0) v√† d√≤ng total cu·ªëi
  final dataRows = finalTable.sublist(1, finalTable.length - 1);

  // üëâ T·∫°o danh s√°ch c√°c object t·ª´ headerRow v√† dataRows
  final items = dataRows.map((row) {
    final Map<String, String> item = {};
    for (int i = 0; i < headerRow.length; i++) {
      final key = headerRow[i];
      final value = i < row.length ? row[i] : '';
      item[key] = value;
    }
    return item;
  }).toList();

  return {
    "total": totalValue,
    "items": items,
  };
}
